// <auto-generated />
using System;
using Entity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230703202731_MovieStreamingServiceMigration")]
    partial class MovieStreamingServiceMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_holder_name");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("expire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("card_payment");
                });

            modelBuilder.Entity("Entity.Model.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("director");

                    b.Property<string>("Genere")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("genere");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("518e04b1-043c-4829-b823-8efcbe347c69"),
                            Actor = "Sally Hawkins",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3304),
                            Director = "Guillermo del Toro",
                            Genere = "Fantasy",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("7ec4efca-0a55-4bc1-827d-a7692a293e4a"),
                            Title = "The Shape of Water",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3304)
                        },
                        new
                        {
                            Id = new Guid("5c87f473-a7c4-4eee-bc17-e6048d7fafff"),
                            Actor = "Mahershala Ali",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3310),
                            Director = "Barry Jenkins",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.1m,
                            SubscriptionId = new Guid("7ec4efca-0a55-4bc1-827d-a7692a293e4a"),
                            Title = "Moonlight",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3310)
                        },
                        new
                        {
                            Id = new Guid("beb3361c-43b4-4611-875e-fa2296a78ed8"),
                            Actor = "Michael Keaton",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3312),
                            Director = "Tom McCarthy",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("7ec4efca-0a55-4bc1-827d-a7692a293e4a"),
                            Title = "Spotlight",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3312)
                        },
                        new
                        {
                            Id = new Guid("ac26b8aa-f0de-4ca6-859a-62b9b07be0d9"),
                            Actor = "Song Kang Ho",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3314),
                            Director = "Bong Joon Ho",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("7ec4efca-0a55-4bc1-827d-a7692a293e4a"),
                            Title = "Parasite",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3315)
                        },
                        new
                        {
                            Id = new Guid("d461743d-4664-41c4-80c3-239a276f851d"),
                            Actor = "Elijah Wood",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3320),
                            Director = "Peter Jackson",
                            Genere = "Fantasy",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("c486ca23-b288-478c-973a-de75595d6b37"),
                            Title = "The Lord of the Rings: The Return of the King",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3320)
                        },
                        new
                        {
                            Id = new Guid("9ac4c728-ff33-4a52-8a8e-d835e4217e21"),
                            Actor = "Marlon Brando",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3322),
                            Director = "Francis Ford Coppola",
                            Genere = "Crime",
                            IsActive = true,
                            Rating = 4.7m,
                            SubscriptionId = new Guid("c486ca23-b288-478c-973a-de75595d6b37"),
                            Title = "The Godfather",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3322)
                        },
                        new
                        {
                            Id = new Guid("fca2786d-d18a-4e35-9259-a7f5e85f6bbc"),
                            Actor = "Clark Gable",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3324),
                            Director = "Victor Fleming",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("c486ca23-b288-478c-973a-de75595d6b37"),
                            Title = "Gone with the Wind",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3324)
                        },
                        new
                        {
                            Id = new Guid("acf2ce5e-b799-4fe0-9c1a-d67bcb1e15d4"),
                            Actor = "Liam Neeson",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3326),
                            Director = "Steven Spielberg",
                            Genere = "Biography",
                            IsActive = true,
                            Rating = 4.6m,
                            SubscriptionId = new Guid("c486ca23-b288-478c-973a-de75595d6b37"),
                            Title = "Schindler's List",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3326)
                        },
                        new
                        {
                            Id = new Guid("03ba24d5-8bb0-44b5-bb9b-1ec7749023ca"),
                            Actor = "Humphrey Bogart",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3328),
                            Director = "Michael Curtiz",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("e88f6a6d-7a3d-434e-b4ba-d61f6c38b52c"),
                            Title = "Casablanca",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3329)
                        },
                        new
                        {
                            Id = new Guid("67a4dcd3-8f12-4759-b7ff-5237dacf1760"),
                            Actor = "Leonardo DiCaprio",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3330),
                            Director = "Martin Scorsese",
                            Genere = "Crime",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("e88f6a6d-7a3d-434e-b4ba-d61f6c38b52c"),
                            Title = "The Departed",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3330)
                        },
                        new
                        {
                            Id = new Guid("78d99698-ea37-4e51-a176-4355082fcff8"),
                            Actor = "Anthony Hopkins",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3332),
                            Director = "Jonathan Demme",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("e88f6a6d-7a3d-434e-b4ba-d61f6c38b52c"),
                            Title = "The Silence of the Lambs",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3332)
                        },
                        new
                        {
                            Id = new Guid("221398e0-9e2d-4322-bc5d-daba7765c9cd"),
                            Actor = "Michael Keaton",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3334),
                            Director = "Alejandro González Iñárritu",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("e88f6a6d-7a3d-434e-b4ba-d61f6c38b52c"),
                            Title = "Birdman",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3335)
                        },
                        new
                        {
                            Id = new Guid("e16371c4-0184-4b41-b740-de95248c5960"),
                            Actor = "Chiwetel Ejiofor",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3339),
                            Director = "Steve McQueen",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("c5d19446-4c0f-450b-936a-b998c8c4e438"),
                            Title = "12 Years a Slave",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3339)
                        },
                        new
                        {
                            Id = new Guid("6cfbfeb6-6361-40cb-9af2-d149849c675a"),
                            Actor = "Javier Bardem",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3341),
                            Director = "Joel Coen, Ethan Coen",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("c5d19446-4c0f-450b-936a-b998c8c4e438"),
                            Title = "No Country for Old Men",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3341)
                        },
                        new
                        {
                            Id = new Guid("69cab019-baf0-4d0d-a4d8-b48b0ca2f50d"),
                            Actor = "Colin Firth",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3342),
                            Director = "Tom Hooper",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.1m,
                            SubscriptionId = new Guid("c5d19446-4c0f-450b-936a-b998c8c4e438"),
                            Title = "The King's Speech",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3343)
                        },
                        new
                        {
                            Id = new Guid("a61f7287-91d2-4c93-b4d3-115cb2a0f6bd"),
                            Actor = "Russell Crowe",
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3344),
                            Director = "Ron Howard",
                            Genere = "Biography",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("c5d19446-4c0f-450b-936a-b998c8c4e438"),
                            Title = "A Beautiful Mind",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3344)
                        });
                });

            modelBuilder.Entity("Entity.Model.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("Entity.Model.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.ToTable("subscription");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ec4efca-0a55-4bc1-827d-a7692a293e4a"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3286),
                            Description = "This plan offers standard definition (SD) streaming on one device at a time. It's a cost-effective option for individuals or budget-conscious users",
                            IsActive = true,
                            Key = "BASIC",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3286)
                        },
                        new
                        {
                            Id = new Guid("c486ca23-b288-478c-973a-de75595d6b37"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3289),
                            Description = "This plan provides high definition (HD) streaming on up to two devices simultaneously. It is suitable for users who prefer better video quality and want to share their account with family members",
                            IsActive = true,
                            Key = "STANDARD",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3289)
                        },
                        new
                        {
                            Id = new Guid("e88f6a6d-7a3d-434e-b4ba-d61f6c38b52c"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3291),
                            Description = "This plan offers Ultra HD (4K) streaming on up to four devices at the same time. It is ideal for users with large households or those who desire the best video quality available",
                            IsActive = true,
                            Key = "PREMIUM",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3291)
                        },
                        new
                        {
                            Id = new Guid("c5d19446-4c0f-450b-936a-b998c8c4e438"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3292),
                            Description = "The free plan offers limited access to the streaming site's content library",
                            IsActive = true,
                            Key = "FREE",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3292)
                        });
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UpiApp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_app");

                    b.Property<string>("UpiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("upi_payment");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3174),
                            IsActive = true,
                            Password = "/3vZexp3id3Sd1Ei/WgX8xc2ctqfgCzuxX8oQyW/WJ8=",
                            Role = "Admin",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3176),
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = new Guid("391c8da9-8465-49b2-a5ee-68990aa49f62"),
                            CreatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            CreatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3183),
                            IsActive = true,
                            Password = "dM0p8PMqmscp69xac484T6OErIqk5WM4qDtV+MzVGdY=",
                            Role = "Admin",
                            UpdatedBy = new Guid("135b327b-497f-4a2a-a6dc-6c70dcf8d6dc"),
                            UpdatedOn = new DateTime(2023, 7, 3, 20, 27, 31, 328, DateTimeKind.Utc).AddTicks(3183),
                            UserName = "Propel"
                        });
                });

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithOne("CardPayment")
                        .HasForeignKey("Entity.Model.CardPayment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Movie", b =>
                {
                    b.HasOne("Entity.Model.Subscription", "Subscription")
                        .WithMany("Movies")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Entity.Model.Profile", b =>
                {
                    b.HasOne("Entity.Model.Subscription", "Subscription")
                        .WithMany("Profiles")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithOne("UpiPayment")
                        .HasForeignKey("Entity.Model.UpiPayment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Subscription", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Navigation("CardPayment");

                    b.Navigation("Profiles");

                    b.Navigation("UpiPayment");
                });
#pragma warning restore 612, 618
        }
    }
}
