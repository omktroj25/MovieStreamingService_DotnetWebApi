// <auto-generated />
using System;
using Entity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230526110339_MovieStreamingServiceMigration")]
    partial class MovieStreamingServiceMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_holder_name");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("expire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("card_payment");
                });

            modelBuilder.Entity("Entity.Model.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("director");

                    b.Property<string>("Genere")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("genere");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("movie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c38622fd-37bd-4af4-80eb-9f42814f9192"),
                            Actor = "Sally Hawkins",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5598),
                            Director = "Guillermo del Toro",
                            Genere = "Fantasy",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("6b61a787-b20d-48ad-aa97-39d8b2551f3c"),
                            Title = "The Shape of Water",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5598)
                        },
                        new
                        {
                            Id = new Guid("26678ae1-0948-4566-9861-310cab588897"),
                            Actor = "Mahershala Ali",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5615),
                            Director = "Barry Jenkins",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.1m,
                            SubscriptionId = new Guid("6b61a787-b20d-48ad-aa97-39d8b2551f3c"),
                            Title = "Moonlight",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5616)
                        },
                        new
                        {
                            Id = new Guid("0634fa71-593f-44fc-8ed3-6c48546a5fc3"),
                            Actor = "Michael Keaton",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5618),
                            Director = "Tom McCarthy",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("6b61a787-b20d-48ad-aa97-39d8b2551f3c"),
                            Title = "Spotlight",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5618)
                        },
                        new
                        {
                            Id = new Guid("d2ace484-c584-440d-9980-145cbd405a11"),
                            Actor = "Song Kang Ho",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5628),
                            Director = "Bong Joon Ho",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("6b61a787-b20d-48ad-aa97-39d8b2551f3c"),
                            Title = "Parasite",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5629)
                        },
                        new
                        {
                            Id = new Guid("4a66d7c0-1617-4363-9b9d-3e27c03d3a12"),
                            Actor = "Elijah Wood",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5631),
                            Director = "Peter Jackson",
                            Genere = "Fantasy",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("eae8a2ee-2c30-471a-8f08-310d1400573b"),
                            Title = "The Lord of the Rings: The Return of the King",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("16159777-2ce0-4fd0-b85d-b364538c60f4"),
                            Actor = "Marlon Brando",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5633),
                            Director = "Francis Ford Coppola",
                            Genere = "Crime",
                            IsActive = true,
                            Rating = 4.7m,
                            SubscriptionId = new Guid("eae8a2ee-2c30-471a-8f08-310d1400573b"),
                            Title = "The Godfather",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5634)
                        },
                        new
                        {
                            Id = new Guid("3401c340-c1af-4387-a520-f389bf489623"),
                            Actor = "Clark Gable",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5636),
                            Director = "Victor Fleming",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("eae8a2ee-2c30-471a-8f08-310d1400573b"),
                            Title = "Gone with the Wind",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5636)
                        },
                        new
                        {
                            Id = new Guid("6198bdca-56fa-4d28-9af8-913c4c098b38"),
                            Actor = "Liam Neeson",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5638),
                            Director = "Steven Spielberg",
                            Genere = "Biography",
                            IsActive = true,
                            Rating = 4.6m,
                            SubscriptionId = new Guid("eae8a2ee-2c30-471a-8f08-310d1400573b"),
                            Title = "Schindler's List",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5639)
                        },
                        new
                        {
                            Id = new Guid("25c82962-a3cf-436e-9a2c-f08f88f44280"),
                            Actor = "Humphrey Bogart",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5641),
                            Director = "Michael Curtiz",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("4b554483-edaa-4b49-9ea7-31ec22c7a4e7"),
                            Title = "Casablanca",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5641)
                        },
                        new
                        {
                            Id = new Guid("fc3af630-2577-4588-b5a0-b17f56d85e8c"),
                            Actor = "Leonardo DiCaprio",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5643),
                            Director = "Martin Scorsese",
                            Genere = "Crime",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("4b554483-edaa-4b49-9ea7-31ec22c7a4e7"),
                            Title = "The Departed",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5643)
                        },
                        new
                        {
                            Id = new Guid("7c951dd5-48b6-4d18-8d7e-a3054afad587"),
                            Actor = "Anthony Hopkins",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5645),
                            Director = "Jonathan Demme",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.4m,
                            SubscriptionId = new Guid("4b554483-edaa-4b49-9ea7-31ec22c7a4e7"),
                            Title = "The Silence of the Lambs",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5646)
                        },
                        new
                        {
                            Id = new Guid("edc05d1f-10ea-4512-b899-7b32429ed6a8"),
                            Actor = "Michael Keaton",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5651),
                            Director = "Alejandro González Iñárritu",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.2m,
                            SubscriptionId = new Guid("4b554483-edaa-4b49-9ea7-31ec22c7a4e7"),
                            Title = "Birdman",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5651)
                        },
                        new
                        {
                            Id = new Guid("95ff5d50-f49d-4988-aa18-b0a9e079b3fd"),
                            Actor = "Chiwetel Ejiofor",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5653),
                            Director = "Steve McQueen",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("a99388f0-7111-4d76-babb-e572cd200c37"),
                            Title = "12 Years a Slave",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5653)
                        },
                        new
                        {
                            Id = new Guid("73378ae5-c944-43c1-9790-969cba68e9dc"),
                            Actor = "Javier Bardem",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5655),
                            Director = "Joel Coen, Ethan Coen",
                            Genere = "Thriller",
                            IsActive = true,
                            Rating = 4.5m,
                            SubscriptionId = new Guid("a99388f0-7111-4d76-babb-e572cd200c37"),
                            Title = "No Country for Old Men",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5656)
                        },
                        new
                        {
                            Id = new Guid("c6d61e65-ad4e-4c04-93f3-9cdd2547da1c"),
                            Actor = "Colin Firth",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5658),
                            Director = "Tom Hooper",
                            Genere = "Drama",
                            IsActive = true,
                            Rating = 4.1m,
                            SubscriptionId = new Guid("a99388f0-7111-4d76-babb-e572cd200c37"),
                            Title = "The King's Speech",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5658)
                        },
                        new
                        {
                            Id = new Guid("136ffdc7-70a6-4fb1-8ee3-8c695c0e803b"),
                            Actor = "Russell Crowe",
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5660),
                            Director = "Ron Howard",
                            Genere = "Biography",
                            IsActive = true,
                            Rating = 4.3m,
                            SubscriptionId = new Guid("a99388f0-7111-4d76-babb-e572cd200c37"),
                            Title = "A Beautiful Mind",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5660)
                        });
                });

            modelBuilder.Entity("Entity.Model.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("Entity.Model.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.ToTable("subscription");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b61a787-b20d-48ad-aa97-39d8b2551f3c"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5242),
                            Description = "This plan offers standard definition (SD) streaming on one device at a time. It's a cost-effective option for individuals or budget-conscious users",
                            IsActive = true,
                            Key = "BASIC",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5243)
                        },
                        new
                        {
                            Id = new Guid("eae8a2ee-2c30-471a-8f08-310d1400573b"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5246),
                            Description = "This plan provides high definition (HD) streaming on up to two devices simultaneously. It is suitable for users who prefer better video quality and want to share their account with family members",
                            IsActive = true,
                            Key = "STANDARD",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5246)
                        },
                        new
                        {
                            Id = new Guid("4b554483-edaa-4b49-9ea7-31ec22c7a4e7"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5521),
                            Description = "This plan offers Ultra HD (4K) streaming on up to four devices at the same time. It is ideal for users with large households or those who desire the best video quality available",
                            IsActive = true,
                            Key = "PREMIUM",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5523)
                        },
                        new
                        {
                            Id = new Guid("a99388f0-7111-4d76-babb-e572cd200c37"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5525),
                            Description = "The free plan offers limited access to the streaming site's content library",
                            IsActive = true,
                            Key = "FREE",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5526)
                        });
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UpiApp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_app");

                    b.Property<string>("UpiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upi_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("upi_payment");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5051),
                            IsActive = true,
                            Password = "/3vZexp3id3Sd1Ei/WgX8xc2ctqfgCzuxX8oQyW/WJ8=",
                            Role = "Admin",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5055),
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = new Guid("6a451953-a671-40fd-8ff6-537e824b7615"),
                            CreatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            CreatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5065),
                            IsActive = true,
                            Password = "dM0p8PMqmscp69xac484T6OErIqk5WM4qDtV+MzVGdY=",
                            Role = "Admin",
                            UpdatedBy = new Guid("ed87a888-ca9c-493d-9b50-e18bf61da782"),
                            UpdatedOn = new DateTime(2023, 5, 26, 11, 3, 38, 914, DateTimeKind.Utc).AddTicks(5065),
                            UserName = "Propel"
                        });
                });

            modelBuilder.Entity("Entity.Model.CardPayment", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithOne("CardPayment")
                        .HasForeignKey("Entity.Model.CardPayment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Movie", b =>
                {
                    b.HasOne("Entity.Model.Subscription", "Subscription")
                        .WithMany("Movies")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Entity.Model.Profile", b =>
                {
                    b.HasOne("Entity.Model.Subscription", "Subscription")
                        .WithMany("Profiles")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.UpiPayment", b =>
                {
                    b.HasOne("Entity.Model.User", "User")
                        .WithOne("UpiPayment")
                        .HasForeignKey("Entity.Model.UpiPayment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.Subscription", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Navigation("CardPayment");

                    b.Navigation("Profiles");

                    b.Navigation("UpiPayment");
                });
#pragma warning restore 612, 618
        }
    }
}
